name: 自动拼接通用与特殊部分文件
on:
  push:
    paths:
      - 'common/**'   # 监控common文件夹的修改
      - 'special/**'  # 监控special文件夹的修改
  pull_request:
    paths:
      - 'common/**'
      - 'special/**'

jobs:
  combine-files:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 必须，允许Actions提交代码
    steps:
      # 1. 拉取最新代码
      - name: Checkout 代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，避免冲突

      # 2. 设置Python环境（脚本用Python编写）
      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'  # 使用最新Python 3

      # 3. 运行拼接脚本（核心逻辑）
      - name: 执行拼接脚本
        run: python .github/scripts/combine.py
        env:
          COMMON_DIR: 'common'      # 通用部分文件夹（可修改）
          SPECIAL_DIR: 'special'    # 特殊部分文件夹（可修改）
          OUTPUT_DIR: '.'           # 输出到根目录（可修改为dist/等）
          COMBINE_ORDER: 'common-first'  # 拼接顺序（common-first/special-first）
          SEPARATOR: '\n'           # 内容分隔符（如'\n---\n'添加分隔线）
          EXTENSION_MODE: 'common'  # 扩展名规则（common/special/none）

      # 4. 检查是否有生成的文件需要提交
      - name: 检查修改
        id: check-changes
        run: |
          git status --porcelain
          echo "changes=$(git status --porcelain | wc -l)" >> $GITHUB_OUTPUT

      # 5. 提交并推送生成的文件
      - name: 提交修改
        if: steps.check-changes.outputs.changes > 0  # 有修改时才提交
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Auto-generate: 拼接通用与特殊部分文件（$(date +'%Y-%m-%d %H:%M:%S')）"
          git push origin HEAD:${{ github.ref }}  # 推送至当前分支
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 自动获取的GitHub Token（无需手动配置）
